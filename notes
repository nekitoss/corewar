работа с минусовыми значениями при IDX_MOD через signed shot int
каретка передвинется на размер параметров, зашифрованных после опкода
непрямой адрес - сдвиг каретки относительно текущего PC
прямой (direct) - число (после процента)
керри изменяется если в регистре вышел ноль
джамп работает только если керри=1
новый процесс (форк) кладется на верх стека
новый процесс наследует все от отца, кроме РС, РС пересчитывается на джамп (IDX mod attention)
количество лайвов суммируется и проверяется каждые CYCLE_TO_DIE, если оно больше NBR_LIVE тогда уменьшается на CYCLE_DELTA
если лайвов меньше заданного, но прошло CYCLE_TO_DIE в количестве MAX_CHECKS раз, все равно уменьшить
система First In Last Out -  если у всех процессов по одному лайву, выиграет тот кто сказал лайв последним - тоесть тот, который зашел как первый процесс.
сделать дамп памяти - в хексе, по 32 октета (байта) в строке (по пдф) в шестндцатиричном формате
процессы запослняются согласно нумерации игроков, если повторяются или больше номера игрока - ошибка
в первом регистре - номер игрока, размером REG_SIZE=4=int
номера игроков идут -1 -2 -3 -4
сумма лайвов, которая проверяется NBR_LIVE - для лайвов с любым параметром, даже если лайв сказан за не существующих игроков.
для кадого игрока - ласт лайв играет роль - последний сказавший = виннер
Aff: ?
aff при параметре -а
статистику соотношения предыдущего раунда и текущего раунда
скорость циклов
добавить к виртуалке: состояние в регистрах и керри.
коректность размера данных сравнить по аналогу таблицы op.c, 
состояние кодирующих пар байт не использованных переменных (больше кол-ва аргументов) не влияет на работу программы
если кодирующие байты неверные, считается размер предположительного количества данных, но учитываются только байты, которые должны были быть закодированы и каретка перепрыгивет
если размера директа не существует, он считается как бОльший = 4 байта
каретка при наличии кодирующего байта, равного нулю, перепрыгнет на позицию после него
каретку при движении %MEM_SIZE - тогда автоматом -2 выдаст MEM_SIZE-2=4094, но если перед тем сделать %IDX_MOD - тогда все поломается
T_IND = 4 !=3 (задекларирован в op.c как 4)
Если ни один не сказал лайв, или все сказали в один и тот же цикл - выиграет последний. Если один сказал лайв и помер, а другие не сказали - выиграл он.

